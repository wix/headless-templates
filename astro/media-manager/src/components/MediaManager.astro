---
import MediaUploader from "./MediaUploader.astro";
import MediaCatalog from "./MediaCatalog.astro";
import MediaViewer from "./MediaViewer";
import { files } from "@wix/media";

// Mock data as fallback
const mockMediaItems = [
  {
    id: "1",
    name: "Mountain Landscape.jpg",
    type: "image/jpeg",
    url: "https://static.wixstatic.com/media/11062b_5f918a05d6cd428a9c47d496780b289d~mv2_d_5760_3840_s_4_2.jpg",
    uploadDate: new Date().toISOString(),
    thumbnailUrl:
      "https://static.wixstatic.com/media/11062b_5f918a05d6cd428a9c47d496780b289d~mv2_d_5760_3840_s_4_2.jpg/v1/fill/w_200,h_140,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/11062b_5f918a05d6cd428a9c47d496780b289d~mv2_d_5760_3840_s_4_2.jpg",
  },
  {
    id: "2",
    name: "Beach Sunset.jpg",
    type: "image/jpeg",
    url: "https://static.wixstatic.com/media/11062b_0322ebcb50954a0dbab1e07e71be921c~mv2_d_4928_3264_s_4_2.jpg",
    uploadDate: new Date(Date.now() - 86400000).toISOString(),
    thumbnailUrl:
      "https://static.wixstatic.com/media/11062b_0322ebcb50954a0dbab1e07e71be921c~mv2_d_4928_3264_s_4_2.jpg/v1/fill/w_200,h_140,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/11062b_0322ebcb50954a0dbab1e07e71be921c~mv2_d_4928_3264_s_4_2.jpg",
  },
  {
    id: "3",
    name: "City Skyline.jpg",
    type: "image/jpeg",
    url: "https://static.wixstatic.com/media/11062b_88078871957f44b6886b8999872c4d68~mv2_d_3000_2000_s_2.jpg",
    uploadDate: new Date(Date.now() - 172800000).toISOString(),
    thumbnailUrl:
      "https://static.wixstatic.com/media/11062b_88078871957f44b6886b8999872c4d68~mv2_d_3000_2000_s_2.jpg/v1/fill/w_200,h_140,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/11062b_88078871957f44b6886b8999872c4d68~mv2_d_3000_2000_s_2.jpg",
  },
  {
    id: "4",
    name: "Product Demo.mp4",
    type: "video/mp4",
    url: "https://video.wixstatic.com/video/11062b_3d13bee40e424792b841c2c482289cca/720p/mp4/file.mp4",
    uploadDate: new Date(Date.now() - 259200000).toISOString(),
    thumbnailUrl:
      "https://static.wixstatic.com/media/11062b_3d13bee40e424792b841c2c482289cca~mv2.jpg/v1/fill/w_200,h_140,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/11062b_3d13bee40e424792b841c2c482289cca~mv2.jpg",
  },
];

// Initialize with loading state
let mediaItems = [];
let isLoading = true;

try {
  // Try to fetch actual media files from Wix Media Manager
  const response = await files.listFiles();

  if (response.files && response.files.length > 0) {
    // Use actual media files if available
    mediaItems = response.files.map((file) => ({
      id: file._id || "",
      name: file.displayName || "",
      type: file.mediaType?.toLowerCase().includes("image")
        ? "image/jpeg"
        : "video/mp4",
      url: file.url || "",
      uploadDate: file._updatedDate?.toString() || new Date().toISOString(),
      thumbnailUrl: file.thumbnailUrl || "",
    }));
  } else {
    // Fall back to mock data if no media files are found
    mediaItems = mockMediaItems;
  }
} catch (error) {
  // Log error and use mock data if API call fails
  console.error("Error fetching media files:", error);
  mediaItems = mockMediaItems;
} finally {
  isLoading = false;
}

// Client-side script for handling modal and actions
---

<div class="bg-gray-50 min-h-screen">
  <!-- Action bar with filters and upload button -->
  <div class="bg-white border-b border-gray-200 sticky top-0 z-10 shadow-sm">
    <div class="container mx-auto px-4 py-3">
      <div class="flex justify-between items-center">
        <div class="flex items-center space-x-4">
          <div class="font-medium text-gray-700">All Media</div>
          <div class="text-sm text-gray-500">
            {mediaItems.length} item{mediaItems.length !== 1 ? "s" : ""}
          </div>
        </div>
        <button
          id="add-media-button"
          class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2 font-medium"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width={2}
              d="M12 4v16m8-8H4"></path>
          </svg>
          Add Media
        </button>
      </div>
    </div>
  </div>

  <!-- Main content -->
  <div class="container mx-auto px-4 py-6">
    <div class="grid grid-cols-1">
      <!-- Catalog - Takes full width -->
      <div>
        {
          isLoading ? (
            <div class="flex justify-center items-center h-40 bg-white rounded-lg shadow">
              <div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-600" />
            </div>
          ) : (
            <MediaCatalog items={mediaItems} selectedId="" />
          )
        }
      </div>
    </div>
  </div>

  <!-- Add MediaViewer outside the grid, but keep it for modal functionality -->
  <MediaViewer item={null} client:only="react" />

  <!-- Upload Modal (hidden by default) -->
  <div
    id="upload-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-gray-800">Upload Media</h3>
        <button
          id="close-modal-button"
          class="text-gray-500 hover:text-gray-700"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width={2}
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <MediaUploader />
    </div>
  </div>
</div>

<script>
  // Handle modal visibility
  const addMediaButton = document.getElementById("add-media-button");
  const closeModalButton = document.getElementById("close-modal-button");
  const uploadModal = document.getElementById("upload-modal");

  if (addMediaButton && closeModalButton && uploadModal) {
    addMediaButton.addEventListener("click", () => {
      uploadModal.classList.remove("hidden");
    });

    closeModalButton.addEventListener("click", () => {
      uploadModal.classList.add("hidden");
    });

    // Close modal when clicking outside of it
    uploadModal.addEventListener("click", (e) => {
      if (e.target === uploadModal) {
        uploadModal.classList.add("hidden");
      }
    });
  }

  // Add event listener for file upload completion
  document.addEventListener("upload:complete", (event) => {
    window.location.reload(); // Reload page to show the newly uploaded file
    if (uploadModal) {
      uploadModal.classList.add("hidden");
    }
  });

  // Add event listener for when a catalog item is selected
  document.addEventListener("item:selected", (event) => {
    // This will be handled in the MediaViewer component using a custom event
    // that will be dispatched from the MediaCatalog component
  });
</script>
