---
import { Image } from "@wix/image";
import type { MediaItem } from "../types";

interface Props {
  items: MediaItem[];
  selectedId?: string;
}

const { items, selectedId = "" } = Astro.props;

---

<!-- Hidden div to store items data for client-side JavaScript -->
<div id="media-items-data" data-items={JSON.stringify(items)} style="display: none;"></div>

{items.length === 0 ? (
  <div class="text-center p-8 bg-white rounded-lg shadow-md border border-gray-100">
    <div class="flex flex-col items-center">
      <svg
        class="w-16 h-16 text-gray-300 mb-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width={1.5}
          d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
        />
      </svg>
      <p class="text-gray-700 font-medium">No media items uploaded yet</p>
      <p class="text-gray-500 text-sm mt-1">Click "Add Media" to upload your first item</p>
    </div>
  </div>
) : (
  <div class="bg-white rounded-lg shadow-md border border-gray-100 overflow-hidden">
    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 p-4">
      {items.map((item) => {
        return (
          <div
            data-id={item.id}
            class={`media-item relative group rounded-lg overflow-hidden border cursor-pointer transition-all hover:shadow-md ${
              selectedId === item.id ? "border-blue-500 ring-2 ring-blue-200" : "border-gray-200"
            }`}
          >
            <div class="aspect-square bg-gray-50 relative">
              {item.mediaType === "IMAGE" ? (
                <div class="w-full h-full">
                  <Image
                    uri={item.id}
                    width={1500}
                    height={1500}
                    displayMode="fit"
                    containerWidth={280}
                    containerHeight={280}
                    isInFirstFold={true}
                    isSEOBot={false}
                    shouldUseLQIP={true}
                    alt={item.name}
                  />
                </div>
              ) : (
                <div class="relative w-full h-full">
                  <video src={item.url} class="w-full h-full object-cover" muted />
                  <div class="absolute inset-0 flex items-center justify-center">
                    <div class="w-12 h-12 rounded-full bg-black/50 flex items-center justify-center text-white">
                      <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z" />
                      </svg>
                    </div>
                  </div>
                </div>
              )}
              
              <!-- Selection indicator -->
              {selectedId === item.id && (
                <div class="absolute top-2 right-2 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center text-white">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
                  </svg>
                </div>
              )}
              
              <!-- Checkbox selection - Wix style -->
              <div class="absolute top-2 left-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <div class={`w-5 h-5 border rounded ${selectedId === item.id ? 'bg-blue-500 border-blue-500' : 'bg-white/80 border-gray-400'} flex items-center justify-center`}>
                  {selectedId === item.id && (
                    <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
                    </svg>
                  )}
                </div>
              </div>
              
              <!-- Hover overlay with actions -->
              <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity flex items-center justify-center opacity-0 group-hover:opacity-100">
                <div class="flex space-x-2">
                  <button
                    class="preview-button bg-white text-gray-700 rounded-full p-2 hover:bg-blue-500 hover:text-white transition-colors"
                    title="Preview"
                    data-id={item.id}
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width={2}
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width={2}
                        d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                      />
                    </svg>
                  </button>
                  <button
                    class="delete-button bg-white text-gray-700 rounded-full p-2 hover:bg-red-500 hover:text-white transition-colors"
                    title="Delete"
                    data-id={item.id}
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width={2}
                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
            <div class="p-2">
              <div class="text-xs truncate text-gray-700 font-medium">{item.name}</div>
              <div class="text-xs text-gray-500">{new Date(item._createdDate).toLocaleDateString()}</div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
)}

<script>
  import { dispatchItemSelectedEvent } from "../utils/eventUtils";
  import { getDataFromElement } from "../utils/domUtils";
  import type { MediaItem } from "../types";
  import { actions } from "astro:actions";

  const itemsDataElement = document.querySelector('#media-items-data');
  const items = getDataFromElement<MediaItem[]>(itemsDataElement!) || [];
  
  document.querySelectorAll('.media-item').forEach(item => {
    item.addEventListener('click', () => {
      const itemId = item.getAttribute('data-id');
      const selectedItem = items.find((i) => i.id === itemId);
      
      if (selectedItem) {
        dispatchItemSelectedEvent(selectedItem);
        
        document.querySelectorAll('.media-item').forEach(el => {
          el.classList.remove('border-blue-500', 'ring-2', 'ring-blue-200');
          el.classList.add('border-gray-200');
        });
        
        item.classList.remove('border-gray-200');
        item.classList.add('border-blue-500', 'ring-2', 'ring-blue-200');
      }
    });
  });
  
  document.querySelectorAll('.preview-button').forEach(button => {
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      const itemId = button.getAttribute('data-id');
      const selectedItem = items.find((i) => i.id === itemId);
      
      if (selectedItem) {
        dispatchItemSelectedEvent(selectedItem);
      }
    });
  });
  
  document.querySelectorAll('.delete-button').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.stopPropagation();
      if (confirm('Are you sure you want to delete this file?')) {
        const itemId = button.getAttribute('data-id');
        
        if (itemId) {
          const status = await actions.deleteMediaFile({ fileId: itemId });

          if (status) {
            alert('File deleted successfully!');
            window.location.reload();
          } else {
            alert('Failed to delete file. Please try again.');
          }
        }
      }
    });
  });

  // Listen for media updated events
  document.addEventListener('media:updated', (e) => {
    const customEvent = e as CustomEvent<{ item: MediaItem }>;
    const updatedItem = customEvent.detail.item;
    
    if (updatedItem) {
      // Find and update the name in the UI
      const mediaItemEl = document.querySelector(`.media-item[data-id="${updatedItem.id}"]`);
      if (mediaItemEl) {
        const nameEl = mediaItemEl.querySelector('.text-xs.truncate.text-gray-700');
        if (nameEl) {
          nameEl.textContent = updatedItem.name;
        }
      }
      
      // Update the item in our local items array
      const itemIndex = items.findIndex(item => item.id === updatedItem.id);
      if (itemIndex !== -1) {
        items[itemIndex].name = updatedItem.name;
      }
    }
  });
</script> 
