---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import Panel from "../components/Panel.astro";
import "../styles/global.css";
import { availabilityCalendar, services, bookings } from "@wix/bookings";
import { createClient, OAuthStrategy } from "@wix/sdk";
import { redirects } from "@wix/redirects";

// Create Wix client for server-side operations
const wixClient = createClient({
  modules: { services, availabilityCalendar, bookings, redirects },
  auth: OAuthStrategy({
    clientId: "30e9f47f-67ff-46b9-b9f0-bffcf702080d",
  }),
});

// Prefetch available services
const { items: servicesList } = await wixClient.services.queryServices().find();
const freeService = servicesList.find(service => service.name.toLowerCase().includes("free"));
const premiumService = servicesList.find(service => !service.name.toLowerCase().includes("free"));

// Business constants
const businessName = "Acme Consulting";
---

<Layout>
  <div class="min-h-screen bg-gradient-to-b from-white to-secondary/10">
    <Navbar />

    <div class="max-w-7xl mx-auto pt-32 pb-16 px-4">
      <!-- Back button -->
      <div class="mb-6">
        <a href="/" class="inline-flex items-center space-x-2 text-sm font-medium text-gray-600 hover:text-gray-900">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M19 12H5M12 19l-7-7 7-7"/>
          </svg>
          <span>Back to Home</span>
        </a>
      </div>

      <!-- Header -->
      <div class="text-center mb-8 animate-fade-up">
        <div class="mx-auto mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
        <h1 class="text-3xl md:text-4xl font-bold mb-2 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
          Schedule Your Appointment
        </h1>
      </div>

      <div class="text-center animate-fade-up" style="animation-delay: 100ms;">
        <p class="text-muted-foreground mb-12 max-w-2xl mx-auto">
          Select a date and time that works for you, and fill in your
          details to complete the booking with {businessName}.
        </p>
      </div>
      
      <!-- Session type selector -->
      <div class="text-center mb-8 animate-fade-up" style="animation-delay: 100ms;">
        <form id="session-form" class="flex justify-center space-x-4">
          <label class="flex items-center space-x-2">
            <input
              type="radio"
              name="sessionType"
              value="free"
              checked
            />
            <span>Free Session (0.5h)</span>
          </label>
          <label class="flex items-center space-x-2">
            <input
              type="radio"
              name="sessionType"
              value="premium"
            />
            <span>Premium Session (2h, 100â‚¬)</span>
          </label>
        </form>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Date picker -->
        <div class="animate-fade-up" style="animation-delay: 200ms;">
          <Panel class="p-6 overflow-hidden">
            <div class="mb-4 text-center">
              <p class="text-sm font-medium text-muted-foreground">
                Select a date for your appointment
              </p>
            </div>
            <div id="datepicker" class="p-3 rounded-lg"></div>
            <div id="selected-date-display" class="mt-4 text-center hidden">
              <p class="text-sm font-medium text-foreground">
                Selected: <span id="selected-date" class="font-bold"></span>
              </p>
            </div>
          </Panel>
        </div>

        <!-- Time slots -->
        <div class="animate-fade-up" style="animation-delay: 300ms;">
          <div id="time-slots-container">
            <Panel empty emptyMessage="Please select a date first">
              <svg slot="icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
            </Panel>
          </div>
        </div>

        <!-- Booking form -->
        <div id="booking-form" class="animate-fade-up" style="animation-delay: 400ms;">
          <Panel empty emptyMessage="Please select both a date and time to proceed with booking">
            <svg slot="icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
              <circle cx="12" cy="15" r="3" />
            </svg>
          </Panel>
        </div>
      </div>
    </div>

    <Footer />
  </div>
</Layout>

<script>
  import { format, startOfToday, addDays, parseISO } from 'date-fns';
  import { availabilityCalendar, services, bookings } from "@wix/bookings";
  import { createClient, OAuthStrategy } from "@wix/sdk";
  import { redirects } from "@wix/redirects";

  // Create client-side Wix client
  const wixClient = createClient({
    modules: { services, availabilityCalendar, bookings, redirects },
    auth: OAuthStrategy({
      clientId: "30e9f47f-67ff-46b9-b9f0-bffcf702080d",
    }),
  });

  // State
  let selectedDate = null;
  let selectedSlot = null;
  let selectedSessionType = "free";
  let timeSlots = [];
  let isLoadingSlots = false;

  // Get UI elements
  const datepickerContainer = document.getElementById('datepicker');
  const selectedDateDisplay = document.getElementById('selected-date-display');
  const selectedDateText = document.getElementById('selected-date');
  const timeSlotsContainer = document.getElementById('time-slots-container');
  const bookingFormContainer = document.getElementById('booking-form');
  const sessionForm = document.getElementById('session-form');

  // Listen for session type changes
  sessionForm.addEventListener('change', (e) => {
    if (e.target.name === 'sessionType') {
      selectedSessionType = e.target.value;
      selectedSlot = null;
      if (selectedDate) {
        fetchTimeSlots(selectedDate);
      }
      updateBookingForm();
    }
  });

  // Initialize datepicker
  function initDatepicker() {
    // Let's just use a simple date picker for now
    const today = startOfToday();
    const futureDate = addDays(today, 60); // Allow booking 60 days ahead
    
    // Create a grid of dates
    const grid = document.createElement('div');
    grid.className = 'grid grid-cols-7 gap-1';
    
    // Add days of week
    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    daysOfWeek.forEach(day => {
      const dayEl = document.createElement('div');
      dayEl.className = 'text-center text-xs text-muted-foreground pb-1';
      dayEl.textContent = day;
      grid.appendChild(dayEl);
    });
    
    // Add dates for next 30 days
    for (let i = 0; i < 30; i++) {
      const date = addDays(today, i);
      const dateEl = document.createElement('button');
      dateEl.className = 'rounded-md h-8 w-8 flex items-center justify-center text-sm hover:bg-primary/10 transition-colors';
      dateEl.textContent = date.getDate();
      
      if (i === 0) {
        dateEl.classList.add('font-bold');
      }
      
      // Handle date selection
      dateEl.addEventListener('click', () => {
        // Remove selected styling from all dates
        grid.querySelectorAll('button').forEach(btn => {
          btn.classList.remove('bg-primary', 'text-white');
        });
        
        // Add selected styling to clicked date
        dateEl.classList.add('bg-primary', 'text-white');
        
        // Update state and UI
        selectedDate = date;
        selectedDateText.textContent = format(date, 'MMMM d, yyyy');
        selectedDateDisplay.classList.remove('hidden');
        
        // Fetch time slots
        fetchTimeSlots(date);
      });
      
      grid.appendChild(dateEl);
    }
    
    datepickerContainer.appendChild(grid);
  }

  // Fetch time slots for selected date
  async function fetchTimeSlots(date) {
    isLoadingSlots = true;
    updateTimeSlotsUI();
    
    try {
      // Get services
      const { items } = await wixClient.services.queryServices().find();
      
      // Select service based on session type
      const service = selectedSessionType === "free" 
        ? items.find(s => s.name.toLowerCase().includes("free"))
        : items.find(s => !s.name.toLowerCase().includes("free"));
      
      if (!service) {
        throw new Error(`No ${selectedSessionType} service found`);
      }
      
      const today = date;
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Query availability
      const availability = await wixClient.availabilityCalendar.queryAvailability(
        {
          filter: {
            serviceId: [service._id],
            startDate: today.toISOString(),
            endDate: tomorrow.toISOString(),
          },
        },
        { timezone: "UTC" }
      );
      
      // Map to time slots
      timeSlots = availability.availabilityEntries.map((item) => ({
        time: item.slot?.startDate,
        display: Intl.DateTimeFormat("en-US", {
          hour: "numeric",
          minute: "numeric",
          hour12: true,
          timeZone: "UTC",
        }).format(new Date(item.slot?.startDate)),
        available: item.bookable,
        entity: item,
      }));
    } catch (error) {
      console.error("Error fetching time slots:", error);
      timeSlots = [];
    } finally {
      isLoadingSlots = false;
      updateTimeSlotsUI();
    }
  }

  // Update time slots UI
  function updateTimeSlotsUI() {
    // Clear container
    timeSlotsContainer.innerHTML = '';
    
    if (!selectedDate) {
      timeSlotsContainer.innerHTML = `
        <astro-island uid="Z9dLvP" component-url="/Users/nitayn/dev/headless-templates/astro/scheduler/src/components/Panel.astro" component-export="default" renderer-url="/Users/nitayn/dev/headless-templates/astro/scheduler/node_modules/astro/dist/runtime/client/render.js" props="{&quot;empty&quot;:true,&quot;emptyMessage&quot;:&quot;Please select a date first&quot;}" ssr="" client="load" opts="{&quot;name&quot;:&quot;Panel&quot;,&quot;value&quot;:&quot;Z9dLvP&quot;}">
          <div class="glass-panel p-6 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12 6 12 12 16 14"></polyline>
            </svg>
            <p class="text-sm text-muted-foreground">Please select a date first</p>
          </div>
        </astro-island>
      `;
      return;
    }
    
    // Create panel for time slots
    const panel = document.createElement('div');
    panel.className = 'glass-panel';
    
    // Panel content
    let panelContent = `
      <div class="p-6">
        <h3 class="text-base font-medium mb-4">Available Times for ${format(selectedDate, 'MMMM d, yyyy')}</h3>
    `;
    
    if (isLoadingSlots) {
      panelContent += `
        <div class="flex justify-center items-center py-12">
          <svg class="animate-spin h-8 w-8 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="ml-2 text-sm text-muted-foreground">
            Loading available slots...
          </span>
        </div>
      `;
    } else if (timeSlots.length === 0) {
      panelContent += `
        <p class="text-sm text-muted-foreground text-center py-4">
          No available slots for this date
        </p>
      `;
    } else {
      panelContent += `<div class="grid grid-cols-2 sm:grid-cols-3 gap-2">`;
      
      timeSlots.forEach((slot, index) => {
        const isSelected = selectedSlot && selectedSlot.time === slot.time;
        const buttonClass = `w-full text-sm rounded-lg ${isSelected ? 'bg-primary text-white' : 'bg-white hover:bg-primary/10'} 
                             ${!slot.available ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'} 
                             transition-colors py-2 px-3 border border-gray-200`;
                             
        panelContent += `
          <button class="${buttonClass}" 
                  data-slot-index="${index}" 
                  ${!slot.available ? 'disabled' : ''}>
            ${slot.display}
          </button>
        `;
      });
      
      panelContent += `</div>`;
    }
    
    panelContent += `</div>`;
    panel.innerHTML = panelContent;
    
    // Add event listeners to time slot buttons
    panel.querySelectorAll('button[data-slot-index]').forEach(button => {
      button.addEventListener('click', () => {
        const index = parseInt(button.getAttribute('data-slot-index'));
        selectedSlot = timeSlots[index];
        updateTimeSlotsUI(); // Refresh UI to show selected slot
        updateBookingForm();
        
        // Scroll to booking form
        setTimeout(() => {
          const bookingForm = document.getElementById('booking-form');
          if (bookingForm) {
            bookingForm.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      });
    });
    
    timeSlotsContainer.appendChild(panel);
  }

  // Update booking form UI
  function updateBookingForm() {
    // Clear container
    bookingFormContainer.innerHTML = '';
    
    if (!selectedDate || !selectedSlot) {
      bookingFormContainer.innerHTML = `
        <astro-island uid="Z9dLvQ" component-url="/Users/nitayn/dev/headless-templates/astro/scheduler/src/components/Panel.astro" component-export="default" renderer-url="/Users/nitayn/dev/headless-templates/astro/scheduler/node_modules/astro/dist/runtime/client/render.js" props="{&quot;empty&quot;:true,&quot;emptyMessage&quot;:&quot;Please select both a date and time to proceed with booking&quot;}" ssr="" client="load" opts="{&quot;name&quot;:&quot;Panel&quot;,&quot;value&quot;:&quot;Z9dLvQ&quot;}">
          <div class="glass-panel p-6 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
              <circle cx="12" cy="15" r="3" />
            </svg>
            <p class="text-sm text-muted-foreground">Please select both a date and time to proceed with booking</p>
          </div>
        </astro-island>
      `;
      return;
    }
    
    // Create panel for booking form
    const panel = document.createElement('div');
    panel.className = 'glass-panel';
    
    // Format date and time for display
    const formattedDate = format(selectedDate, 'MMMM d, yyyy');
    const formattedTime = selectedSlot.display;
    
    let panelContent = `
      <div class="p-6">
        <h3 class="text-base font-medium mb-4">Complete Your Booking</h3>
        
        <div class="mb-6 p-3 bg-secondary/50 rounded-lg">
          <p class="text-sm font-medium">
            <span class="text-muted-foreground">Date: </span>
            ${formattedDate}
          </p>
          <p class="text-sm font-medium">
            <span class="text-muted-foreground">Time: </span>
            ${formattedTime}
          </p>
        </div>
    `;
    
    if (selectedSessionType === "free") {
      // Free session booking form
      panelContent += `
        <form id="booking-submit-form" class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium mb-1">Name</label>
            <input type="text" id="name" name="name" placeholder="Your full name" required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
          </div>
          
          <div>
            <label for="email" class="block text-sm font-medium mb-1">Email</label>
            <input type="email" id="email" name="email" placeholder="you@example.com" required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
          </div>
          
          <div>
            <label for="phone" class="block text-sm font-medium mb-1">Phone</label>
            <input type="tel" id="phone" name="phone" placeholder="Your phone number" required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
          </div>
          
          <div>
            <label for="address" class="block text-sm font-medium mb-1">Address</label>
            <input type="text" id="address" name="address" placeholder="Your full address" required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
          </div>
          
          <div>
            <label for="notes" class="block text-sm font-medium mb-1">Notes (optional)</label>
            <textarea id="notes" name="notes" placeholder="Any additional information..."
                     class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"></textarea>
          </div>
          
          <button type="submit" class="w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
            Confirm Booking
          </button>
        </form>
      `;
    } else {
      // Premium session checkout button
      panelContent += `
        <div class="text-center">
          <button id="checkout-button" class="w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
            Checkout
          </button>
        </div>
      `;
    }
    
    panelContent += `</div>`;
    panel.innerHTML = panelContent;
    
    // Add event listeners
    if (selectedSessionType === "free") {
      const form = panel.querySelector('#booking-submit-form');
      form.addEventListener('submit', handleBookingSubmit);
    } else {
      const checkoutButton = panel.querySelector('#checkout-button');
      checkoutButton.addEventListener('click', handleCheckoutRedirect);
    }
    
    bookingFormContainer.appendChild(panel);
  }

  // Handle booking form submission
  async function handleBookingSubmit(event) {
    event.preventDefault();
    
    // Get form data
    const formData = new FormData(event.target);
    const bookingData = {
      name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      address: formData.get('address'),
      notes: formData.get('notes') || '',
    };
    
    // Disable submit button
    const submitButton = event.target.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    submitButton.textContent = 'Confirming...';
    
    try {
      // Create booking
      await wixClient.bookings.createBooking({
        bookedEntity: selectedSlot.entity,
        totalParticipants: 1,
        contactDetails: {
          firstName: bookingData.name.split(' ')[0],
          lastName: bookingData.name.split(' ')[1] || '',
          fullAddress: {
            addressLine: bookingData.address,
          },
          email: bookingData.email,
          phone: bookingData.phone,
        },
      });
      
      // Save booking data to session storage for confirmation page
      const savedData = {
        ...bookingData,
        date: selectedDate.toISOString(),
        time: selectedSlot.time,
        displayDate: format(selectedDate, 'MMMM d, yyyy'),
        displayTime: selectedSlot.display,
      };
      sessionStorage.setItem('bookingData', JSON.stringify(savedData));
      
      // Redirect to confirmation page
      window.location.href = '/confirmation';
    } catch (error) {
      console.error('Error creating booking:', error);
      alert('There was a problem creating your booking. Please try again.');
      
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Confirm Booking';
    }
  }

  // Handle checkout redirect for premium sessions
  async function handleCheckoutRedirect() {
    const button = document.getElementById('checkout-button');
    button.disabled = true;
    button.textContent = 'Redirecting...';
    
    try {
      // Create redirect session
      const redirect = await wixClient.redirects.createRedirectSession({
        bookingsCheckout: { 
          slotAvailability: selectedSlot.entity, 
          timezone: "UTC" 
        },
        callbacks: { 
          postFlowUrl: window.location.href 
        },
      });
      
      // Redirect to checkout
      window.location.href = redirect.redirectSession.fullUrl;
    } catch (error) {
      console.error('Error creating redirect session:', error);
      alert('There was a problem redirecting to checkout. Please try again.');
      
      // Re-enable button
      button.disabled = false;
      button.textContent = 'Checkout';
    }
  }

  // Initialize the page
  function init() {
    initDatepicker();
    updateTimeSlotsUI();
    updateBookingForm();
  }

  // Run initialization when DOM is loaded
  document.addEventListener('DOMContentLoaded', init);
</script>