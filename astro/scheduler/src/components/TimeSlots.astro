---
import { formatDisplayDate } from '../utils/date-utils';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div id="time-slots-container" class={className}>
  <div class="glass-panel p-6 text-center">
    <svg class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="10"></circle>
      <polyline points="12 6 12 12 16 14"></polyline>
    </svg>
    <p class="text-sm text-muted-foreground">Please select a date first</p>
  </div>
</div>

<script>
  import { formatDisplayDate } from '../utils/date-utils';
  import { getAvailableSlots } from '../utils/booking-service';
  
  // State
  let selectedDate = null;
  let selectedSlot = null;
  let sessionType = 'free';
  let timeSlots = [];
  let isLoading = false;
  
  // Get container elements
  const timeSlotsContainer = document.getElementById('time-slots-container');
  
  // Listen for date selection events
  document.addEventListener('dateSelected', async (event) => {
    selectedDate = event.detail.date;
    selectedSlot = null;
    
    // Load time slots for the selected date
    await fetchTimeSlots();
  });
  
  // Listen for session type changes
  document.addEventListener('sessionTypeChanged', (event) => {
    sessionType = event.detail.type;
    selectedSlot = null;
    
    if (selectedDate) {
      fetchTimeSlots();
    }
  });
  
  // Fetch available time slots from the service
  async function fetchTimeSlots() {
    if (!selectedDate) return;
    
    isLoading = true;
    updateTimeSlotsUI();
    
    try {
      timeSlots = await getAvailableSlots(selectedDate, sessionType);
    } catch (error) {
      console.error('Error fetching time slots:', error);
      timeSlots = [];
    } finally {
      isLoading = false;
      updateTimeSlotsUI();
    }
  }
  
  // Update the time slots UI
  function updateTimeSlotsUI() {
    if (!timeSlotsContainer) return;
    
    // Clear container
    timeSlotsContainer.innerHTML = '';
    
    if (!selectedDate) {
      timeSlotsContainer.innerHTML = `
        <div class="glass-panel p-6 text-center">
          <svg class="h-6 w-6 mx-auto mb-2 text-muted-foreground" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <polyline points="12 6 12 12 16 14"></polyline>
          </svg>
          <p class="text-sm text-muted-foreground">Please select a date first</p>
        </div>
      `;
      return;
    }
    
    // Create the panel
    const panel = document.createElement('div');
    panel.className = 'glass-panel';
    
    // Add panel content
    let panelContent = `
      <div class="p-6">
        <h3 class="text-base font-medium mb-4">Available Times for ${formatDisplayDate(selectedDate)}</h3>
    `;
    
    if (isLoading) {
      // Loading state
      panelContent += `
        <div class="flex justify-center items-center py-12">
          <svg class="animate-spin h-8 w-8 text-primary" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="ml-2 text-sm text-muted-foreground">
            Loading available slots...
          </span>
        </div>
      `;
    } else if (timeSlots.length === 0) {
      // No slots available
      panelContent += `
        <p class="text-sm text-muted-foreground text-center py-4">
          No available slots for this date
        </p>
      `;
    } else {
      // Show time slots grid
      panelContent += `<div class="grid grid-cols-2 sm:grid-cols-3 gap-2">`;
      
      timeSlots.forEach((slot, index) => {
        const isSelected = selectedSlot && selectedSlot.time === slot.time;
        const buttonClass = `w-full text-sm rounded-lg ${isSelected ? 'bg-primary text-white' : 'bg-white hover:bg-primary/10'} 
                            ${!slot.available ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'} 
                            transition-colors py-2 px-3 border border-gray-200`;
                            
        panelContent += `
          <button class="${buttonClass}" 
                  data-slot-index="${index}" 
                  ${!slot.available ? 'disabled' : ''}>
            ${slot.display}
          </button>
        `;
      });
      
      panelContent += `</div>`;
    }
    
    panelContent += `</div>`;
    panel.innerHTML = panelContent;
    
    // Add event listeners to time slot buttons
    panel.querySelectorAll('button[data-slot-index]').forEach(button => {
      button.addEventListener('click', () => {
        const index = parseInt(button.getAttribute('data-slot-index'));
        selectedSlot = timeSlots[index];
        
        // Update UI
        updateTimeSlotsUI();
        
        // Dispatch time selected event
        const event = new CustomEvent('timeSlotSelected', {
          detail: { slot: selectedSlot }
        });
        document.dispatchEvent(event);
      });
    });
    
    timeSlotsContainer.appendChild(panel);
  }
</script>