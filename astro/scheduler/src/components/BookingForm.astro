---
import Panel from "./ui/Panel.astro";
import EmptyState from "./ui/EmptyState.astro";

interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;
---

<div id="booking-form-container" class={className}>
  <Panel isEmptyState={true}>
    <EmptyState
      icon="calendar"
      message="Please select both a date and time to proceed with booking"
    />
  </Panel>
</div>

<script>
  import { formatDisplayDate } from "../utils/date-utils";
  import {
    createBooking,
    createRedirectSession,
    type BookingData,
    type TimeSlot,
  } from "../utils/booking-service";
  import { createElement, replaceContent } from "../utils/dom-utils";
  import {
    onDateSelected,
    onTimeSlotSelected,
    onSessionTypeChanged,
  } from "../utils/event-utils";

  let selectedDate: Date | null = null;
  let selectedSlot: TimeSlot | null = null;
  let sessionType: "free" | "premium" = "free";

  const bookingFormContainer = document.getElementById(
    "booking-form-container"
  );
  onDateSelected((date) => {
    selectedDate = date;
    updateBookingForm();
  });

  onTimeSlotSelected((slot) => {
    selectedSlot = slot;
    updateBookingForm();

    // Scroll to booking form
    setTimeout(() => {
      bookingFormContainer?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  });

  onSessionTypeChanged((type) => {
    sessionType = type;
    // Reset the selected slot when changing session types
    selectedSlot = null;
    updateBookingForm();
  });

  function updateBookingForm(): void {
    if (!bookingFormContainer) return;

    replaceContent(bookingFormContainer, "");

    if (!selectedDate || !selectedSlot) {
      const emptyState = createElement("div", {
        className: "glass-panel p-6 text-center",
      });

      const icon = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      icon.setAttribute("class", "h-6 w-6 mx-auto mb-2 text-muted-foreground");
      icon.setAttribute("viewBox", "0 0 24 24");
      icon.setAttribute("fill", "none");
      icon.setAttribute("stroke", "currentColor");
      icon.setAttribute("stroke-width", "2");
      icon.setAttribute("stroke-linecap", "round");
      icon.setAttribute("stroke-linejoin", "round");

      icon.innerHTML = `
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
        <circle cx="12" cy="15" r="3" />
      `;

      const message = createElement(
        "p",
        {
          className: "text-sm text-muted-foreground",
        },
        "Please select both a date and time to proceed with booking"
      );

      emptyState.appendChild(icon);
      emptyState.appendChild(message);
      bookingFormContainer.appendChild(emptyState);
      return;
    }

    const panel = createElement("div", { className: "glass-panel" });
    const formattedDate = formatDisplayDate(selectedDate);
    const formattedTime = selectedSlot.display;
    const contentWrapper = createElement("div", { className: "p-6" });

    const header = createElement(
      "h3",
      {
        className: "text-base font-medium mb-4",
      },
      "Complete Your Booking"
    );

    const summary = createElement("div", {
      className: "mb-6 p-3 bg-secondary/50 rounded-lg",
    });

    const dateInfo = createElement(
      "p",
      {
        className: "text-sm font-medium",
      },
      `<span class="text-muted-foreground">Date: </span>${formattedDate}`
    );

    const timeInfo = createElement(
      "p",
      {
        className: "text-sm font-medium",
      },
      `<span class="text-muted-foreground">Time: </span>${formattedTime}`
    );

    summary.appendChild(dateInfo);
    summary.appendChild(timeInfo);

    contentWrapper.appendChild(header);
    contentWrapper.appendChild(summary);

    if (sessionType === "free") {
      const form = createElement("form", {
        className: "space-y-4",
        id: "booking-submit-form",
      });
      const nameField = createFormField(
        "fullName",
        "Name",
        "text",
        "Your full name",
        true
      );
      const emailField = createFormField(
        "email",
        "Email",
        "email",
        "you@example.com",
        true
      );
      const phoneField = createFormField(
        "phone",
        "Phone",
        "tel",
        "Your phone number",
        true
      );
      const addressField = createFormField(
        "address",
        "Address",
        "text",
        "Your full address",
        true
      );
      const notesField = createFormField(
        "notes",
        "Notes (optional)",
        "textarea",
        "Any additional information...",
        false
      );

      const submitButton = createElement(
        "button",
        {
          className:
            "w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors",
          type: "submit",
        },
        "Confirm Booking"
      );

      form.appendChild(nameField);
      form.appendChild(emailField);
      form.appendChild(phoneField);
      form.appendChild(addressField);
      form.appendChild(notesField);
      form.appendChild(submitButton);

      form.addEventListener("submit", handleBookingSubmit);
      contentWrapper.appendChild(form);
    } else {
      const buttonWrapper = createElement("div", { className: "text-center" });
      const checkoutButton = createElement(
        "button",
        {
          className:
            "w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors",
          id: "checkout-button",
        },
        "Checkout"
      );

      checkoutButton.addEventListener("click", handleCheckoutRedirect);

      buttonWrapper.appendChild(checkoutButton);
      contentWrapper.appendChild(buttonWrapper);
    }

    panel.appendChild(contentWrapper);

    bookingFormContainer.appendChild(panel);
  }
  function createFormField(
    id: string,
    label: string,
    type: "text" | "email" | "tel" | "textarea",
    placeholder: string,
    required: boolean
  ): HTMLDivElement {
    const fieldWrapper = createElement("div");

    const labelElement = createElement(
      "label",
      {
        className: "block text-sm font-medium mb-1",
        for: id,
      },
      label
    );

    fieldWrapper.appendChild(labelElement);

    if (type === "textarea") {
      const textarea = createElement("textarea", {
        id,
        name: id,
        placeholder,
        className:
          "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent",
      });

      if (required) {
        textarea.setAttribute("required", "true");
      }

      fieldWrapper.appendChild(textarea);
    } else {
      const input = createElement("input", {
        type,
        id,
        name: id,
        placeholder,
        className:
          "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent",
      });

      if (required) {
        input.setAttribute("required", "true");
      }

      fieldWrapper.appendChild(input);
    }

    return fieldWrapper;
  }

  async function handleBookingSubmit(event: Event): Promise<void> {
    event.preventDefault();

    if (!selectedDate || !selectedSlot) {
      alert("Please select a date and time");
      return;
    }

    const form = event.target as HTMLFormElement;
    const formData: BookingData = {
      name: form.fullName.value,
      email: form.email.value,
      phone: form.phone.value,
      address: form.address.value,
      notes: form.notes.value || "",
    };

    const submitButton = form.querySelector(
      'button[type="submit"]'
    ) as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = "Confirming...";
    }

    try {
      await createBooking(formData, selectedSlot, selectedDate);
      window.location.href = "/confirmation";
    } catch (error) {
      console.error("Error creating booking:", error);
      alert("There was a problem creating your booking. Please try again.");

      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = "Confirm Booking";
      }
    }
  }

  async function handleCheckoutRedirect(): Promise<void> {
    if (!selectedSlot) return;

    const button = document.getElementById(
      "checkout-button"
    ) as HTMLButtonElement;
    if (button) {
      button.disabled = true;
      button.textContent = "Redirecting...";
    }

    try {
      const redirectUrl = await createRedirectSession(
        selectedSlot.entity,
        window.location.href
      );

      if (redirectUrl) {
        window.location.href = redirectUrl;
      } else {
        throw new Error("No redirect URL returned");
      }
    } catch (error) {
      console.error("Error creating redirect session:", error);
      alert("There was a problem redirecting to checkout. Please try again.");

      if (button) {
        button.disabled = false;
        button.textContent = "Checkout";
      }
    }
  }
</script>
