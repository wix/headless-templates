---
import Panel from './ui/Panel.astro';
import EmptyState from './ui/EmptyState.astro';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div id="booking-form-container" class={className}>
  <Panel isEmptyState={true}>
    <EmptyState
      icon="calendar"
      message="Please select both a date and time to proceed with booking"
    />
  </Panel>
</div>

<script>
  import { formatDisplayDate } from '../utils/date-utils';
  import { createBooking, createRedirectSession, BookingData, TimeSlot } from '../utils/booking-service';
  import { createElement, replaceContent } from '../utils/dom-utils';
  import { 
    onDateSelected, 
    onTimeSlotSelected, 
    onSessionTypeChanged 
  } from '../utils/event-utils';
  
  // State
  let selectedDate: Date | null = null;
  let selectedSlot: TimeSlot | null = null;
  let sessionType: 'free' | 'premium' = 'free';
  
  // Get container element
  const bookingFormContainer = document.getElementById('booking-form-container');
  
  // Register event listeners using our utility functions
  onDateSelected((date) => {
    selectedDate = date;
    updateBookingForm();
  });
  
  onTimeSlotSelected((slot) => {
    selectedSlot = slot;
    updateBookingForm();
    
    // Scroll to booking form
    setTimeout(() => {
      bookingFormContainer?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  });
  
  onSessionTypeChanged((type) => {
    sessionType = type;
    updateBookingForm();
  });
  
  // Update the booking form UI
  function updateBookingForm(): void {
    if (!bookingFormContainer) return;
    
    // Clear container
    replaceContent(bookingFormContainer, '');
    
    if (!selectedDate || !selectedSlot) {
      // Show empty state
      const emptyState = createElement('div', { className: 'glass-panel p-6 text-center' });
      
      const icon = createElement('svg', {
        className: 'h-6 w-6 mx-auto mb-2 text-muted-foreground',
        viewBox: '0 0 24 24',
        fill: 'none',
        stroke: 'currentColor',
        'stroke-width': '2',
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round'
      });
      
      icon.innerHTML = `
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
        <circle cx="12" cy="15" r="3" />
      `;
      
      const message = createElement('p', {
        className: 'text-sm text-muted-foreground'
      }, 'Please select both a date and time to proceed with booking');
      
      emptyState.appendChild(icon);
      emptyState.appendChild(message);
      bookingFormContainer.appendChild(emptyState);
      return;
    }
    
    // Create panel for the booking form
    const panel = createElement('div', { className: 'glass-panel' });
    
    // Format date and time for display
    const formattedDate = formatDisplayDate(selectedDate);
    const formattedTime = selectedSlot.display;
    
    // Create panel content wrapper
    const contentWrapper = createElement('div', { className: 'p-6' });
    
    // Add header
    const header = createElement('h3', { 
      className: 'text-base font-medium mb-4' 
    }, 'Complete Your Booking');
    
    // Add booking summary
    const summary = createElement('div', { 
      className: 'mb-6 p-3 bg-secondary/50 rounded-lg' 
    });
    
    const dateInfo = createElement('p', { 
      className: 'text-sm font-medium' 
    }, `<span class="text-muted-foreground">Date: </span>${formattedDate}`);
    
    const timeInfo = createElement('p', { 
      className: 'text-sm font-medium' 
    }, `<span class="text-muted-foreground">Time: </span>${formattedTime}`);
    
    summary.appendChild(dateInfo);
    summary.appendChild(timeInfo);
    
    // Add elements to content wrapper
    contentWrapper.appendChild(header);
    contentWrapper.appendChild(summary);
    
    if (sessionType === 'free') {
      // Create booking form for free sessions
      const form = createElement('form', { 
        className: 'space-y-4',
        id: 'booking-submit-form'
      });
      
      // Create form fields
      const nameField = createFormField('name', 'Name', 'text', 'Your full name', true);
      const emailField = createFormField('email', 'Email', 'email', 'you@example.com', true);
      const phoneField = createFormField('phone', 'Phone', 'tel', 'Your phone number', true);
      const addressField = createFormField('address', 'Address', 'text', 'Your full address', true);
      const notesField = createFormField('notes', 'Notes (optional)', 'textarea', 'Any additional information...', false);
      
      // Create submit button
      const submitButton = createElement('button', {
        className: 'w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors',
        type: 'submit'
      }, 'Confirm Booking');
      
      // Add fields to form
      form.appendChild(nameField);
      form.appendChild(emailField);
      form.appendChild(phoneField);
      form.appendChild(addressField);
      form.appendChild(notesField);
      form.appendChild(submitButton);
      
      // Add form submission handler
      form.addEventListener('submit', handleBookingSubmit);
      
      // Add form to content wrapper
      contentWrapper.appendChild(form);
    } else {
      // Create checkout button for premium sessions
      const buttonWrapper = createElement('div', { className: 'text-center' });
      const checkoutButton = createElement('button', {
        className: 'w-full py-2 px-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors',
        id: 'checkout-button'
      }, 'Checkout');
      
      // Add click handler
      checkoutButton.addEventListener('click', handleCheckoutRedirect);
      
      buttonWrapper.appendChild(checkoutButton);
      contentWrapper.appendChild(buttonWrapper);
    }
    
    // Add content wrapper to panel
    panel.appendChild(contentWrapper);
    
    // Add panel to container
    bookingFormContainer.appendChild(panel);
  }
  
  // Helper function to create form fields
  function createFormField(
    id: string, 
    label: string, 
    type: 'text' | 'email' | 'tel' | 'textarea', 
    placeholder: string, 
    required: boolean
  ): HTMLDivElement {
    const fieldWrapper = createElement('div');
    
    const labelElement = createElement('label', {
      className: 'block text-sm font-medium mb-1',
      for: id
    }, label);
    
    fieldWrapper.appendChild(labelElement);
    
    if (type === 'textarea') {
      const textarea = createElement('textarea', {
        id,
        name: id,
        placeholder,
        className: 'w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent'
      });
      
      if (required) {
        textarea.setAttribute('required', 'true');
      }
      
      fieldWrapper.appendChild(textarea);
    } else {
      const input = createElement('input', {
        type,
        id,
        name: id,
        placeholder,
        className: 'w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent'
      });
      
      if (required) {
        input.setAttribute('required', 'true');
      }
      
      fieldWrapper.appendChild(input);
    }
    
    return fieldWrapper;
  }
  
  // Handle booking form submission
  async function handleBookingSubmit(event: Event): Promise<void> {
    event.preventDefault();
    
    if (!selectedDate || !selectedSlot) {
      alert('Please select a date and time');
      return;
    }
    
    // Get form data
    const form = event.target as HTMLFormElement;
    const formData: BookingData = {
      name: form.name.value,
      email: form.email.value,
      phone: form.phone.value,
      address: form.address.value,
      notes: form.notes.value || '',
    };
    
    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = 'Confirming...';
    }
    
    try {
      // Create booking through service
      await createBooking(formData, selectedSlot, selectedDate);
      
      // Redirect to confirmation page
      window.location.href = '/confirmation';
    } catch (error) {
      console.error('Error creating booking:', error);
      alert('There was a problem creating your booking. Please try again.');
      
      // Re-enable submit button
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Confirm Booking';
      }
    }
  }
  
  // Handle checkout redirect for premium sessions
  async function handleCheckoutRedirect(): Promise<void> {
    if (!selectedSlot) return;
    
    const button = document.getElementById('checkout-button') as HTMLButtonElement;
    if (button) {
      button.disabled = true;
      button.textContent = 'Redirecting...';
    }
    
    try {
      // Create redirect session
      const redirectUrl = await createRedirectSession(
        selectedSlot.entity, 
        window.location.href
      );
      
      if (redirectUrl) {
        window.location.href = redirectUrl;
      } else {
        throw new Error('No redirect URL returned');
      }
    } catch (error) {
      console.error('Error creating redirect session:', error);
      alert('There was a problem redirecting to checkout. Please try again.');
      
      // Re-enable button
      if (button) {
        button.disabled = false;
        button.textContent = 'Checkout';
      }
    }
  }
</script>