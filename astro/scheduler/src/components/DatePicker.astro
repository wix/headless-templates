---
import { getDaysOfWeek, generateDateRange, formatDisplayDate, isToday } from '../utils/date-utils';
import Panel from './ui/Panel.astro';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
const daysOfWeek = getDaysOfWeek();
---

<div class={className}>
  <Panel id="date-picker-container">
    <div class="mb-4 text-center">
      <p class="text-sm font-medium text-muted-foreground">
        Select a date for your appointment
      </p>
    </div>
    
    <div class="p-3 rounded-lg">
      <div id="datepicker" class="grid grid-cols-7 gap-1">
        {daysOfWeek.map(day => (
          <div class="text-center text-xs text-muted-foreground pb-1">{day}</div>
        ))}
      </div>
    </div>
    
    <div id="selected-date-display" class="mt-4 text-center hidden">
      <p class="text-sm font-medium text-foreground">
        Selected: <span id="selected-date" class="font-bold"></span>
      </p>
    </div>
  </Panel>
</div>

<script>
  import { generateDateRange, formatDisplayDate, startOfToday } from '../utils/date-utils';
  import { createElement } from '../utils/dom-utils';
  import { dispatchDateSelected } from '../utils/event-utils';
  
  function initDatepicker(): void {
    const today = startOfToday();
    const dates = generateDateRange(30);
    const datepicker = document.getElementById('datepicker');
    
    if (!datepicker) return;
    
    dates.forEach((date, index) => {
      const dateEl = createElement('button', {
        className: 'rounded-md h-8 w-8 flex items-center justify-center text-sm hover:bg-primary/10 transition-colors',
        'data-date': date.toISOString()
      }, date.getDate().toString());
      
      if (index === 0) {
        dateEl.classList.add('font-bold');
      }
      dateEl.addEventListener('click', () => {
        handleDateSelection(dateEl, date);
      });
      
      datepicker.appendChild(dateEl);
    });
  }
  
  function handleDateSelection(element: HTMLButtonElement, date: Date): void {
    document.querySelectorAll('#datepicker button').forEach(btn => {
      btn.classList.remove('bg-primary', 'text-white');
    });
    
    element.classList.add('bg-primary', 'text-white');
    updateSelectedDateDisplay(date);
    
    dispatchDateSelected(date);
  }
  
  function updateSelectedDateDisplay(date: Date): void {
    const selectedDateDisplay = document.getElementById('selected-date-display');
    const selectedDateText = document.getElementById('selected-date');
    
    if (selectedDateDisplay && selectedDateText) {
      selectedDateText.textContent = formatDisplayDate(date);
      selectedDateDisplay.classList.remove('hidden');
    }
  }
  
  document.addEventListener('DOMContentLoaded', initDatepicker);
</script>