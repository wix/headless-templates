---
import { forms } from "@wix/forms";
import { FormFieldsIds } from "../utils/form-service";
import Button from "./Button.astro";
import FormField from "./FormField.astro";

interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;

const ageGroups = [
  { value: "Under 10", label: "Under 10" },
  { value: "Under 18", label: "Under 18" },
  { value: "Adult (18+)", label: "Adult (18+)" },
];

const skillLevels = [
  { value: "Beginner", label: "Beginner" },
  { value: "Intermediate", label: "Intermediate" },
  { value: "Advanced", label: "Advanced" },
  { value: "Professional", label: "Professional" },
];

const form = await forms.getForm("2fc1513a-7ad0-4a5e-a731-1d0fb6e0e7e1");
const formFieldsSettings = form.fieldsV2
  .filter((field) => field.fieldType === "INPUT" && !field.hidden)
  .reduce((acc, field) => {
    acc[field.inputOptions.target] = field.inputOptions;
    return acc;
  }, {});
---

<form
  id="tournament-form"
  class={`form-container shadow-none ${className}`}
  method="POST"
>
  <div
    class="mb-8 border-t-8 border-primary rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm shadow-gray-200"
  >
    <h2 class="text-xl font-medium mb-4 text-primary">Team Information</h2>

    <FormField
      id={FormFieldsIds.teamName}
      label={formFieldsSettings[FormFieldsIds.teamName].stringOptions
        .textInputOptions.label}
      required={formFieldsSettings[FormFieldsIds.teamName].required}
    />

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        type="select"
        id={FormFieldsIds.ageGroup}
        label={formFieldsSettings[FormFieldsIds.ageGroup].stringOptions
          .dropdownOptions.label}
        required={formFieldsSettings[FormFieldsIds.ageGroup].required}
        options={formFieldsSettings[FormFieldsIds.ageGroup].stringOptions
          .dropdownOptions.options}
      />

      <FormField
        type="select"
        id={FormFieldsIds.skillLevel}
        label={formFieldsSettings[FormFieldsIds.skillLevel].stringOptions
          .dropdownOptions.label}
        required={formFieldsSettings[FormFieldsIds.skillLevel].required}
        options={formFieldsSettings[FormFieldsIds.skillLevel].stringOptions
          .dropdownOptions.options}
      />
    </div>
  </div>

  <div
    class="mb-8 border-t-8 border-teal-500 rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm mt-4 shadow-gray-200"
  >
    <h2 class="text-xl font-medium mb-4 text-teal-600">Contact Information</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        id={FormFieldsIds.firstName}
        label={formFieldsSettings[FormFieldsIds.firstName].stringOptions
          .textInputOptions.label}
        required={formFieldsSettings[FormFieldsIds.firstName].required}
      />

      <FormField
        id={FormFieldsIds.lastName}
        label={formFieldsSettings[FormFieldsIds.lastName].stringOptions
          .textInputOptions.label}
        required={formFieldsSettings[FormFieldsIds.lastName].required}
      />
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        type="email"
        id={FormFieldsIds.email}
        label={formFieldsSettings[FormFieldsIds.email].stringOptions
          .textInputOptions.label}
        required={formFieldsSettings[FormFieldsIds.email].required}
      />

      <FormField
        type="tel"
        id={FormFieldsIds.phone}
        label={formFieldsSettings[FormFieldsIds.phone].stringOptions
          .phoneInputOptions.label}
        required={formFieldsSettings[FormFieldsIds.phone].required}
      />
    </div>
  </div>

  <div
    class="mb-8 border-t-8 border-orange-400 rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm shadow-gray-200 mt-4"
  >
    <h2 class="text-xl font-medium mb-4 text-orange-500">
      Additional Information
    </h2>

    <FormField
      type="textarea"
      id={FormFieldsIds.phone}
      label={formFieldsSettings[FormFieldsIds.specialRequirements].stringOptions
        .textInputOptions.label}
      required={formFieldsSettings[FormFieldsIds.specialRequirements].required}
    />
  </div>

  <!-- Error message container -->
  <div
    id="form-error"
    class="hidden p-4 mb-4 text-sm text-white bg-error rounded-md"
  >
  </div>

  <div class="flex justify-between items-center mt-8">
    <div>
      <span class="text-xs text-gray-500">* Required question</span>
    </div>
    <div>
      <Button type="submit" variant="primary"> Submit </Button>
    </div>
  </div>
</form>

<script>
  import { submitTournamentRegistration } from "../utils/form-service";

  const form = document.getElementById("tournament-form") as HTMLFormElement;
  const errorContainer = document.getElementById(
    "form-error"
  ) as HTMLDivElement;
  const submitButton = document.querySelector(
    "button[type='submit']"
  ) as HTMLButtonElement;

  function showError(message: string) {
    if (errorContainer) {
      errorContainer.textContent = message;
      errorContainer.classList.remove("hidden");
      errorContainer.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }

  function clearError() {
    if (errorContainer) {
      errorContainer.textContent = "";
      errorContainer.classList.add("hidden");
    }
  }

  if (form) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      clearError();

      // Set loading state
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = "Submitting...";
      }

      try {
        // Get form data
        const formData = new FormData(form);
        const formDataObj = Object.fromEntries(formData.entries());

        // Submit the form
        const result = await submitTournamentRegistration(formDataObj);

        if (result.success) {
          // window.location.href = "/success";
        } else {
          showError(result.error || "Please check your form and try again.");
        }
      } catch (error) {
        console.error("Error:", error);
        showError("Something went wrong. Please try again later.");
      } finally {
        // Reset button state
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = "Submit";
        }
      }
    });
  }
</script>
