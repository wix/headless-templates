---
import FormField from "./FormField.astro";
import Button from "./Button.astro";

interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;

const ageGroups = [
  { value: "under10", label: "Under 10" },
  { value: "under12", label: "Under 12" },
  { value: "under14", label: "Under 14" },
  { value: "under16", label: "Under 16" },
  { value: "under18", label: "Under 18" },
  { value: "adult", label: "Adult (18+)" },
];

const skillLevels = [
  { value: "beginner", label: "Beginner" },
  { value: "intermediate", label: "Intermediate" },
  { value: "advanced", label: "Advanced" },
  { value: "professional", label: "Professional" },
];
---

<form
  id="tournament-form"
  class={`form-container shadow-none ${className}`}
  method="POST"
>
  <div
    class="mb-8 border-t-8 border-primary rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm shadow-gray-200"
  >
    <h2 class="text-xl font-medium mb-4 text-primary">Team Information</h2>

    <FormField
      id="teamName"
      label="Team Name"
      placeholder="Enter your team name"
      required
    />

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        id="ageGroup"
        label="Age Group"
        type="select"
        options={ageGroups}
      />

      <FormField
        id="skillLevel"
        label="Skill Level"
        type="select"
        options={skillLevels}
      />
    </div>
  </div>

  <div
    class="mb-8 border-t-8 border-teal-500 rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm mt-4 shadow-gray-200"
  >
    <h2 class="text-xl font-medium mb-4 text-teal-600">Contact Information</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        id="firstName"
        label="First Name"
        placeholder="Enter your first name"
      />

      <FormField
        id="lastName"
        label="Last Name"
        placeholder="Enter your last name"
      />
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <FormField
        id="email"
        label="Email Address"
        type="email"
        placeholder="Enter your email address"
      />

      <FormField
        id="phone"
        label="Phone Number"
        type="tel"
        placeholder="Enter your phone number"
      />
    </div>
  </div>

  <div
    class="mb-8 border-t-8 border-orange-400 rounded-lg pt-6 px-6 pb-6 bg-white shadow-sm shadow-gray-200 mt-4"
  >
    <h2 class="text-xl font-medium mb-4 text-orange-500">
      Additional Information
    </h2>

    <FormField
      id="specialRequirements"
      label="Special Requirements or Requests"
      type="textarea"
      placeholder="Please let us know if you have any special requirements or requests"
    />
  </div>

  <!-- Error message container -->
  <div
    id="form-error"
    class="hidden p-4 mb-4 text-sm text-white bg-error rounded-md"
  >
  </div>

  <div class="flex justify-between items-center mt-8">
    <div>
      <span class="text-xs text-gray-500">* Required question</span>
    </div>
    <div>
      <Button type="submit" variant="primary"> Submit </Button>
    </div>
  </div>
</form>

<script>
  import { submitTournamentRegistration } from "../utils/form-service";

  const form = document.getElementById("tournament-form") as HTMLFormElement;
  const errorContainer = document.getElementById(
    "form-error"
  ) as HTMLDivElement;
  const submitButton = document.querySelector(
    "button[type='submit']"
  ) as HTMLButtonElement;

  function showError(message: string) {
    if (errorContainer) {
      errorContainer.textContent = message;
      errorContainer.classList.remove("hidden");

      // Scroll to error
      errorContainer.scrollIntoView({ behavior: "smooth", block: "center" });
    } else {
      // Fallback if error container not found
      alert(message);
    }
  }

  function clearError() {
    if (errorContainer) {
      errorContainer.textContent = "";
      errorContainer.classList.add("hidden");
    }
  }

  if (form) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      clearError();

      // Disable submit button and show loading state
      if (submitButton) {
        submitButton.disabled = true;
        const originalText = submitButton.textContent || "Submit";
        submitButton.textContent = "Submitting...";
      }

      try {
        const formData = new FormData(form);
        const formDataObj = Object.fromEntries(formData.entries());

        console.log("Form data:", formDataObj);

        // Submit the form data
        const result = await submitTournamentRegistration(formDataObj);

        if (result.success) {
          // Store the registration ID in session storage
          if (result.id) {
            sessionStorage.setItem("registrationId", result.id);
          }

          // Redirect to success page
          window.location.href = "/success";
        } else {
          showError(
            result.error ||
              "An error occurred during submission. Please try again."
          );
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        showError(
          error instanceof Error ? error.message : "An unknown error occurred"
        );
      } finally {
        // Re-enable submit button and restore text
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = "Submit";
        }
      }
    });
  }
</script>
